{"ast":null,"code":"import { put, takeEvery, call } from \"redux-saga/effects\";\nimport { getUserInfoByIdRequested, getUserInfoByIdSuccess, getUserInfoByIdFailure, GET_USER_INFO_BY_ID } from '../actions/profile-actions';\n\nfunction* fetchGetInfoAsync(action) {\n  const {\n    service\n  } = action;\n\n  try {\n    yield put(getUserInfoByIdRequested());\n    const response = yield call(() => service.getUserInfoById());\n    yield put(getUserInfoByIdSuccess(response));\n  } catch ({\n    error\n  }) {\n    yield put(getUserInfoByIdFailure(error));\n  }\n}\n\nexport function* profileWatcher() {\n  yield takeEvery(GET_USER_INFO_BY_ID, fetchGetInfoAsync);\n}","map":{"version":3,"sources":["D:/Документы/5_sem/NCplanner/Front/NetDoc/src/modules/profile/sagas/profile-saga.ts"],"names":["put","takeEvery","call","getUserInfoByIdRequested","getUserInfoByIdSuccess","getUserInfoByIdFailure","GET_USER_INFO_BY_ID","fetchGetInfoAsync","action","service","response","getUserInfoById","error","profileWatcher"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,SAAb,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SACIC,wBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,mBAJJ,QAMO,4BANP;;AAYA,UAAUC,iBAAV,CAA4BC,MAA5B,EAA2D;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AACA,MAAI;AACA,UAAMR,GAAG,CAACG,wBAAwB,EAAzB,CAAT;AACA,UAAMO,QAA2B,GAAG,MAAMR,IAAI,CAAC,MAC3CO,OAAO,CAACE,eAAR,EAD0C,CAA9C;AAGA,UAAMX,GAAG,CAACI,sBAAsB,CAACM,QAAD,CAAvB,CAAT;AACH,GAND,CAME,OAAO;AAAEE,IAAAA;AAAF,GAAP,EAAkB;AAChB,UAAMZ,GAAG,CAACK,sBAAsB,CAACO,KAAD,CAAvB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMZ,SAAS,CAACK,mBAAD,EAAsBC,iBAAtB,CAAf;AACH","sourcesContent":["import {put, takeEvery, call} from \"redux-saga/effects\"\r\nimport {\r\n    getUserInfoByIdRequested,\r\n    getUserInfoByIdSuccess,\r\n    getUserInfoByIdFailure,\r\n    GET_USER_INFO_BY_ID,\r\n    GetUserInfoByIdAction\r\n} from '../actions/profile-actions';\r\n\r\nexport interface ResponseGenerator{\r\n    [propName: string]: any;\r\n}\r\n\r\nfunction* fetchGetInfoAsync(action: GetUserInfoByIdAction) {\r\n    const { service } = action;\r\n    try {\r\n        yield put(getUserInfoByIdRequested());\r\n        const response: ResponseGenerator = yield call(() =>\r\n            service.getUserInfoById()\r\n        );\r\n        yield put(getUserInfoByIdSuccess(response));\r\n    } catch ({ error }) {\r\n        yield put(getUserInfoByIdFailure(error as string));\r\n    }\r\n}\r\n\r\nexport function* profileWatcher() {\r\n    yield takeEvery(GET_USER_INFO_BY_ID, fetchGetInfoAsync)\r\n}"]},"metadata":{},"sourceType":"module"}