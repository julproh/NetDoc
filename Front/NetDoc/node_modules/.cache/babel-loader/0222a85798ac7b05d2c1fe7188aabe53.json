{"ast":null,"code":"import { put, takeEvery, call } from \"redux-saga/effects\";\nimport { getInfoRequested, getInfoSuccess, getInfoFailure, GET_INFO } from '../actions/storage-actions';\n\nfunction* fetchGetInfoAsync(action) {\n  const {\n    service\n  } = action;\n\n  try {\n    yield put(getInfoRequested());\n    const response = yield call(() => service.getInfo());\n    yield put(getInfoSuccess(response));\n  } catch ({\n    error\n  }) {\n    yield put(getInfoFailure(error));\n  }\n}\n\nexport function* storageWatcher() {\n  yield takeEvery(GET_INFO, fetchGetInfoAsync);\n}","map":{"version":3,"sources":["D:/Документы/5_sem/NCplanner/NetDoc/src/modules/storage/sagas/storage-saga.ts"],"names":["put","takeEvery","call","getInfoRequested","getInfoSuccess","getInfoFailure","GET_INFO","fetchGetInfoAsync","action","service","response","getInfo","error","storageWatcher"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,SAAb,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SACIC,gBADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,QAJJ,QAMO,4BANP;;AAYA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAmD;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AACA,MAAI;AACA,UAAMR,GAAG,CAACG,gBAAgB,EAAjB,CAAT;AACA,UAAMO,QAA2B,GAAG,MAAMR,IAAI,CAAC,MAC3CO,OAAO,CAACE,OAAR,EAD0C,CAA9C;AAGA,UAAMX,GAAG,CAACI,cAAc,CAACM,QAAD,CAAf,CAAT;AACH,GAND,CAME,OAAO;AAAEE,IAAAA;AAAF,GAAP,EAAkB;AAChB,UAAMZ,GAAG,CAACK,cAAc,CAACO,KAAD,CAAf,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMZ,SAAS,CAACK,QAAD,EAAWC,iBAAX,CAAf;AACH","sourcesContent":["import {put, takeEvery, call} from \"redux-saga/effects\"\r\nimport {\r\n    getInfoRequested,\r\n    getInfoSuccess,\r\n    getInfoFailure,\r\n    GET_INFO,\r\n    GetInfoAction\r\n} from '../actions/storage-actions';\r\n\r\nexport interface ResponseGenerator{\r\n    [propName: string]: any;\r\n}\r\n\r\nfunction* fetchGetInfoAsync(action: GetInfoAction) {\r\n    const { service } = action;\r\n    try {\r\n        yield put(getInfoRequested());\r\n        const response: ResponseGenerator = yield call(() =>\r\n            service.getInfo()\r\n        );\r\n        yield put(getInfoSuccess(response));\r\n    } catch ({ error }) {\r\n        yield put(getInfoFailure(error as string));\r\n    }\r\n}\r\n\r\nexport function* storageWatcher() {\r\n    yield takeEvery(GET_INFO, fetchGetInfoAsync)\r\n}"]},"metadata":{},"sourceType":"module"}